***THIS README IS NOT FINISHED YET

***************************************************************************************************************************************
OVERVIEW
--------

Milestone 2 is a program executable on the MSP430F5529 development board that functions as a temperature regulation system. The design
uses a thermistor temperature sensor, a 5 V regulator (which produces heat), and a 12 V fan. The code allows the user to set a desired
temperature and receive the current temperature in real time. This program uses the target temperature and current temperature to
automatically control the speed of the fan.

***************************************************************************************************************************************
SPECIFICATIONS
--------------

This program is designed to act as a thermostat. The user interfaces with the system using a computer application called "Realterm."
The user inputs a desired temperature into the program and is able to read the temperature of the 5 V regulator in real-time. The
system reads the temperature by interpreting the voltage across the 10k thermistor. Using this information, the program can control a 
fan with a PWM signal converge on the desired temperature using proportional integral-derivative (PID) control.

The system is accurate within ± 3°C. 

***************************************************************************************************************************************
MSP430F5529 DESIGN
------------------

In order to execute this program:
- The MSP430F5529 must be set up properly
- ADC12 must be configured with interrupts enabled
- UART must be configured with interrupts enabled
- functions for Binary to temperature conversion and PID control must be present

Global Variables
- unsigned int q       : used in ADC12ISR to store the value of ADC12MEM0
- unsigned char target : used in USCI_A1_interrupt and PIDcontrol to track target temperature
- unsigned char temp   : used in ADC12ISR and PIDcontrol to keep track of current temperature
- unsigned char Q      : used in ADC12ISR to store the output of binaryToTemperature
- double prevError     : used in PIDcontrol to calculate D and I for PID control
- double error         : used in PIDcontrol to calculate closed loop correction
- unsigned int watch   : used in ADC12ISR to monitor the value of TA0CCR1 for debugging
- int pwm              : used in PIDcontrol to calculate the PWM of the fan
- double qin           : used in binaryToTemperature to convert from binary to a temperature
- double I             : used in PIDcontol to calculate "integral" in PID control
- double D             : used in PIDcontrol to calculate "derivative" in PID control
- double P             : used in PIDcontrol to calculate "proportion" in PID control

Setup Functions
- void ADC12setup()   : configures the ADC12 peripheral
- void UARTsetup()    : configures UART in order to interface with Realterm
- void portSetup()    : configures the ports to read the thermistor
- void timerA0setup() : configures the Timer A0 for the fan PWM

Interrupt Functions
- void ADC12ISR()          :
- void USCI_A1_interrupt() :

Internal Functions
- unsigned char binaryToTemperature(double in):  function that converts an ADC12 binary value to temperature
- void PIDcontrol()                           :  function that controls the fan PWM

***************************************************************************************************************************************
INITIALIZATIONS
---------------

void ADC12setup()
- ADC12 Control reg 0 on, sampling hold time 64 ADC12clk cycles
- ADC12 Sampling and hold pulse set to sample input signal single-channel, single conversion
- ADC12 Mem0 control reg, input channel A0, last conversion in sequence
- ADC12 enable conversion is set high
- Start sample and 
- interrupt enabled
//CLEAN THAT UP A LITTLE

void UARTsetup()
- P3.3,4 = USCI_A0 TXD/RXD
- P4.4,4.5 =USCI_A1 TXD/RXD
- SMCLK
- 1MHz, 9600 Baud Rate
- Modulation UCBRSx=1, UCBRFx=0
- **Initialize USCI state machine**
- Enable USCI_A1 RX interrupt
//CLEAN THIS UP A LITTLE

void portSetup()
- P6.0 is the port used to interface with the thermistor
- P6.0 will have a voltage between 0 and 5 volts depending on the temperature
- P6.0 configured as output by setting Bit 0 of P6SEL high
- P6.0 configured as input by setting Bit 0 of P6DIR low

void timerA0setup()
- Timer A Control set to: SMCLK, Up-mode, no internal divider
- Value stored in Timer A register initialized to zero
- TimerA0 CCR0  initialized at 255
- Timer A0 set to reset/set mode
- configures P1.2 as hardware PWM register
- output to PWM the fan
//CLEAN THIS UP A LITTLE

***************************************************************************************************************************************
INTERRUPTS
----------

ADC12ISR
- Stuff goes here
- and more stuff

USCI_A1_interrupt
- Stuff goes here


***************************************************************************************************************************************
INTERNAL FUNCTIONS
------------------

unsigned char binaryToTemperature(double in)
- Converts the binary value stored in ADC12MEM0 to an unsigned character that represents the temperature in Celsius
- first, converts to the corresponding voltage by multiplying the input by the resolution: (5 V) / (4096 bits)
- next, converts to the corresponding resistance by manipulating the equation of a voltage divider circuit
- Next, converts the resistance to a temperature
- temperature varies as a logarithmic function of Resistance according to the Steinhart-Hart equation
- this equation was converted to a piecewise linear function with 10 segments
- if, else if statements are set up to determine what segment to use for the conversion

void PIDcontrol()
- prevError gets the value of error from the previous iteration
- the value of error is updated to equal target - temp
- the integral control, I = prevError + error
- the derivative control, D = prevError - error
- the proportional control, P = error/target
- pwm equals TA0CCR1 * P plus a linear combination of D and I
- pwm is treated for boundary conditions to ensure that the fan PWM does not underflow or overflow
- TA0CCR1 is assigned the value stored in pwm


***************************************************************************************************************************************
EXTERNAL CIRCUITRY
------------------

Voltage divider circuit with a 15k resistor on the top and a 10k thermistor on the bottom
Low side switch using the 2N7000 NMOS to protect the processor from drawing current from te
flyback diode to prevent backwards emf

